PROC(5)                    Linux Programmer's Manual                   PROC(5)



NNAAMMEE
       proc - process information pseudo-filesystem


DDEESSCCRRIIPPTTIIOONN
       The  _p_r_o_c  filesystem is a pseudo-filesystem which is used as an inter‐
       face to kernel data structures. It is commonly mounted at _/_p_r_o_c.   Most
       of  it  is  read-only,  but  some  files  allow  kernel variables to be
       changed.

       The following outline gives a quick tour through the /proc hierarchy.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]
              There is a numerical subdirectory for each running process;  the
              subdirectory is named by the process ID.  Each contains the fol‐
              lowing pseudo-files and directories.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_c_m_d_l_i_n_e
              This holds the complete command line for the process, unless the
              whole  process  has been swapped out, or unless the process is a
              zombie.  In either of these later cases,  there  is  nothing  in
              this  file:  i.e.  a read on this file will return 0 characters.
              The command line arguments appear in this file as a set of null-
              separated  strings,  with  a  further  null  byte after the last
              string.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_c_w_d
              This is a link to the current working directory of the  process.
              To  find  out  the  cwd  of process 20, for instance, you can do
              this:

              cd /proc/20/cwd; /bin/pwd

              Note that the pwd command is often a shell  builtin,  and  might
              not work properly. In bash, you may use pwd -P.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_e_n_v_i_r_o_n
              This file contains the environment for the process.  The entries
              are separated by null characters, and there may be a null  char‐
              acter at the end.  Thus, to print out the environment of process
              1, you would do:

              (cat /proc/1/environ; echo) | tr "\000" "\n"

              (For a reason why one should want to do this, see lliilloo(8).)

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_e_x_e
              Under Linux 2.2 and 2.4 _e_x_e is a symbolic  link  containing  the
              actual path name of the executed command.  The _e_x_e symbolic link
              can be dereferenced normally - attempting to open _e_x_e will  open
              the  executable.   You  can  even type _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_e_x_e to run
              another copy of the same process as [number].

              Under Linux 2.0 and earlier _e_x_e is a pointer to the binary which
              was executed, and appears as a symbolic link. A rreeaaddlliinnkk(2) call
              on the _e_x_e special file under Linux 2.0 returns a string in  the
              format:

              [device]:inode

              For  example, [0301]:1502 would be inode 1502 on device major 03
              (IDE, MFM, etc. drives) minor 01 (first partition on  the  first
              drive).

              ffiinndd(1) with the -inum option can be used to locate the file.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_f_d
              This  is a subdirectory containing one entry for each file which
              the process has open, named by its file descriptor, and which is
              a  symbolic  link  to  the  actual file (as the exe entry does).
              Thus, 0 is standard input, 1 standard output, 2 standard  error,
              etc.

              Programs  that will take a filename, but will not take the stan‐
              dard input, and which write to a file, but will not  send  their
              output  to  standard output, can be effectively foiled this way,
              assuming that -i is the flag designating an input file and -o is
              the flag designating an output file:
              foobar -i /proc/self/fd/0 -o /proc/self/fd/1 ...
              and you have a working filter.  Note that this will not work for
              programs that seek on their files, as the files in the fd direc‐
              tory are not seekable.

              /proc/self/fd/N  is  approximately the same as /dev/fd/N in some
              UNIX and UNIX-like systems.  Most Linux MAKEDEV scripts symboli‐
              cally link /dev/fd to /proc/self/fd, in fact.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_m_a_p_s
              A  file containing the currently mapped memory regions and their
              access permissions.

              The format is:

        address           perms offset  dev   inode      pathname
        08048000-08056000 r-xp 00000000 03:0c 64593      /usr/sbin/gpm
        08056000-08058000 rw-p 0000d000 03:0c 64593      /usr/sbin/gpm
        08058000-0805b000 rwxp 00000000 00:00 0
        40000000-40013000 r-xp 00000000 03:0c 4165       /lib/ld-2.2.4.so
        40013000-40015000 rw-p 00012000 03:0c 4165       /lib/ld-2.2.4.so
        4001f000-40135000 r-xp 00000000 03:0c 45494      /lib/libc-2.2.4.so
        40135000-4013e000 rw-p 00115000 03:0c 45494      /lib/libc-2.2.4.so
        4013e000-40142000 rw-p 00000000 00:00 0
        bffff000-c0000000 rwxp 00000000 00:00 0

              where address is the address space in the process that it  occu‐
              pies, perms is a set of permissions:

                   r = read
                   w = write
                   x = execute
                   s = shared
                   p = private (copy on write)

              offset  is  the offset into the file/whatever, dev is the device
              (major:minor), and inode is the inode on that device.   0  indi‐
              cates that no inode is associated with the memory region, as the
              case would be with bss.

              Under Linux 2.0 there is no field giving pathname.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_m_e_m
              Via the _m_e_m file one can access the pages of a process's  memory
              through ooppeenn(2), rreeaadd(2), and ffsseeeekk(3).

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_r_o_o_t
              Unix  and  Linux  support  the idea of a per-process root of the
              filesystem, set by the cchhrroooott(2) system call.   Root  points  to
              the file system root, and behaves as exe, fd/*, etc. do.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_s_t_a_t
              Status  information  about  the process.  This is used by ppss(1).
              It is defined in _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_f_s_/_p_r_o_c_/_a_r_r_a_y_._c.

              The fields, in order, with their proper ssccaannff(3)  format  speci‐
              fiers, are:

              _p_i_d %d The process id.

              _c_o_m_m %s
                     The  filename of the executable, in parentheses.  This is
                     visible whether or not the executable is swapped out.

              _s_t_a_t_e %c
                     One character from the string "RSDZTW" where  R  is  run‐
                     ning,  S is sleeping in an interruptible wait, D is wait‐
                     ing in uninterruptible disk sleep,  Z  is  zombie,  T  is
                     traced or stopped (on a signal), and W is paging.

              _p_p_i_d %d
                     The PID of the parent.

              _p_g_r_p %d
                     The process group ID of the process.

              _s_e_s_s_i_o_n %d
                     The session ID of the process.

              _t_t_y___n_r %d
                     The tty the process uses.

              _t_p_g_i_d %d
                     The  process group ID of the process which currently owns
                     the tty that the process is connected to.

              _f_l_a_g_s %lu
                     The flags of the process.  The math bit is decimal 4, and
                     the traced bit is decimal 10.

              _m_i_n_f_l_t %lu
                     The  number  of  minor  faults the process has made which
                     have not required loading a memory page from disk.

              _c_m_i_n_f_l_t %lu
                     The number of minor faults that the process's  waited-for
                     children have made.

              _m_a_j_f_l_t %lu
                     The  number  of  major  faults the process has made which
                     have required loading a memory page from disk.

              _c_m_a_j_f_l_t %lu
                     The number of major faults that the process's  waited-for
                     children have made.

              _u_t_i_m_e %lu
                     The  number  of jiffies that this process has been sched‐
                     uled in user mode.

              _s_t_i_m_e %lu
                     The number of jiffies that this process has  been  sched‐
                     uled in kernel mode.

              _c_u_t_i_m_e %ld
                     The  number  of  jiffies  that  this process's waited-for
                     children have been scheduled  in  user  mode.  (See  also
                     ttiimmeess(2).)

              _c_s_t_i_m_e %ld
                     The number of jiffies that this process' waited-for chil‐
                     dren have been scheduled in kernel mode.

              _p_r_i_o_r_i_t_y %ld
                     The standard nice value,  plus  fifteen.   The  value  is
                     never negative in the kernel.

              _n_i_c_e %ld
                     The  nice  value ranges from 19 (nicest) to -19 (not nice
                     to others).

              _0 %ld  This value is hard coded to 0  as  a  placeholder  for  a
                     removed field.

              _i_t_r_e_a_l_v_a_l_u_e %ld
                     The  time  in  jiffies before the next SIGALRM is sent to
                     the process due to an interval timer.

              _s_t_a_r_t_t_i_m_e %lu
                     The time in jiffies  the  process  started  after  system
                     boot.

              _v_s_i_z_e %lu
                     Virtual memory size in bytes.

              _r_s_s %ld
                     Resident  Set  Size:  number  of pages the process has in
                     real memory, minus 3 for administrative purposes. This is
                     just  the  pages which count towards text, data, or stack
                     space.  This does not include pages which have  not  been
                     demand-loaded in, or which are swapped out.

              _r_l_i_m %lu
                     Current limit in bytes on the rss of the process (usually
                     4294967295 on i386).

              _s_t_a_r_t_c_o_d_e %lu
                     The address above which program text can run.

              _e_n_d_c_o_d_e %lu
                     The address below which program text can run.

              _s_t_a_r_t_s_t_a_c_k %lu
                     The address of the start of the stack.

              _k_s_t_k_e_s_p %lu
                     The current value of esp (stack pointer), as found in the
                     kernel stack page for the process.

              _k_s_t_k_e_i_p %lu
                     The current EIP (instruction pointer).

              _s_i_g_n_a_l %lu
                     The bitmap of pending signals (usually 0).

              _b_l_o_c_k_e_d %lu
                     The  bitmap of blocked signals (usually 0, 2 for shells).

              _s_i_g_i_g_n_o_r_e %lu
                     The bitmap of ignored signals.

              _s_i_g_c_a_t_c_h %lu
                     The bitmap of catched signals.

              _w_c_h_a_n %lu
                     This is the "channel" in which the  process  is  waiting.
                     It  is the address of a system call, and can be looked up
                     in a namelist if you need a textual name.  (If  you  have
                     an  up-to-date /etc/psdatabase, then try _p_s _-_l to see the
                     WCHAN field in action.)

              _n_s_w_a_p %lu
                     Number of pages swapped - not maintained.

              _c_n_s_w_a_p %lu
                     Cumulative _n_s_w_a_p for child processes.

              _e_x_i_t___s_i_g_n_a_l %d
                     Signal to be sent to parent when we die.

              _p_r_o_c_e_s_s_o_r %d
                     CPU number last executed on.

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_s_t_a_t_m
              Provides information about memory status in pages.  The  columns
              are:
               size       total program size
               resident   resident set size
               share      shared pages
               trs        text (code)
               drs        data/stack
               lrs        library
               dt         dirty pages

       _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_s_t_a_t_u_s
              Provides  much  of  the  information  in _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_s_t_a_t and
              _/_p_r_o_c_/_[_n_u_m_b_e_r_]_/_s_t_a_t_m in a format that's  easier  for  humans  to
              parse.

       _/_p_r_o_c_/_a_p_m
              Advanced  power  management version and battery information when
              CONFIG_APM is defined at kernel compilation time.

       _/_p_r_o_c_/_b_u_s
              Contains subdirectories for installed busses.

       _/_p_r_o_c_/_b_u_s_/_p_c_c_a_r_d
              Subdirectory for pcmcia devices when  CONFIG_PCMCIA  is  set  at
              kernel compilation time.

       _/_p_r_o_c_/_b_u_s_/_p_c_c_a_r_d_/_d_r_i_v_e_r_s

       _/_p_r_o_c_/_b_u_s_/_p_c_i
              Contains  various bus subdirectories and pseudo-files containing
              information about pci  busses,  installed  devices,  and  device
              drivers.  Some of these files are not ASCII.

       _/_p_r_o_c_/_b_u_s_/_p_c_i_/_d_e_v_i_c_e_s
              Information  about  pci  devices.   They may be accessed through
              llssppccii(8) and sseettppccii(8).

       _/_p_r_o_c_/_c_m_d_l_i_n_e
              Arguments passed to the Linux kernel at boot time.   Often  done
              via a boot manager such as lliilloo(1).

       _/_p_r_o_c_/_c_p_u_i_n_f_o
              This  is  a  collection of CPU and system architecture dependent
              items, for each supported architecture a  different  list.   Two
              common   entries  are  _p_r_o_c_e_s_s_o_r  which  gives  CPU  number  and
              _b_o_g_o_m_i_p_s; a system constant that  is  calculated  during  kernel
              initialization.  SMP machines have information for each CPU.

       _/_p_r_o_c_/_d_e_v_i_c_e_s
              Text  listing  of  major numbers and device groups.  This can be
              used by MAKEDEV scripts for consistency with the kernel.

       _/_p_r_o_c_/_d_m_a
              This is a list of the registered _I_S_A DMA (direct memory  access)
              channels in use.

       _/_p_r_o_c_/_d_r_i_v_e_r
              Empty subdirectory.

       _/_p_r_o_c_/_e_x_e_c_d_o_m_a_i_n_s
              List of the execution domains (ABI personalities).

       _/_p_r_o_c_/_f_b
              Frame buffer information when CONFIG_FB is defined during kernel
              compilation.

       _/_p_r_o_c_/_f_i_l_e_s_y_s_t_e_m_s
              A text listing of the filesystems which were compiled  into  the
              kernel.  Incidentally, this is used by mmoouunntt(1) to cycle through
              different filesystems when none is specified.

       _/_p_r_o_c_/_f_s
              Empty subdirectory.

       _/_p_r_o_c_/_i_d_e
              This directory exists on systems with the ide  bus.   There  are
              directories  for  each  ide  channel and attached device.  Files
              include:

              cache              buffer size in KB
              capacity           number of sectors
              driver             driver version
              geometry           physical and logical geometry
              identify           in hexidecimal
              media              media type
              model              manufacturer's model number
              settings           drive settings
              smart_thresholds   in hexidecimal
              smart_values       in hexidecimal

              The hhddppaarrmm(8) utility provides access to this information  in  a
              friendly format.

       _/_p_r_o_c_/_i_n_t_e_r_r_u_p_t_s
              This  is used to record the number of interrupts per each IRQ on
              (at least) the i386 architechure.  Very easy to read formatting,
              done in ASCII.

       _/_p_r_o_c_/_i_o_m_e_m
              I/O memory map in Linux 2.4.

       _/_p_r_o_c_/_i_o_p_o_r_t_s
              This is a list of currently registered Input-Output port regions
              that are in use.

       _/_p_r_o_c_/_k_c_o_r_e
              This file represents the physical memory of the  system  and  is
              stored  in the ELF core file format.  With this pseudo-file, and
              an unstripped kernel (/usr/src/linux/vmlinux) binary, GDB can be
              used to examine the current state of any kernel data structures.

              The total length of the file is  the  size  of  physical  memory
              (RAM) plus 4KB.

       _/_p_r_o_c_/_k_m_s_g
              This  file  can  be used instead of the ssyysslloogg(2) system call to
              read kernel messages.  A process must have superuser  privileges
              to  read  this file, and only one process should read this file.
              This file should not be read if  a  syslog  process  is  running
              which uses the ssyysslloogg(2) system call facility to log kernel mes‐
              sages.

              Information in this file is retrieved with the ddmmeessgg(8) program.

       _/_p_r_o_c_/_k_s_y_m_s
              This  holds  the  kernel exported symbol definitions used by the
              mmoodduulleess(X) tools to dynamically link and bind loadable  modules.

       _/_p_r_o_c_/_l_o_a_d_a_v_g
              The  load  average  numbers  give  the number of jobs in the run
              queue (state R) or waiting for disk I/O (state D) averaged  over
              1,  5,  and  15  minutes.  They are the same as the load average
              numbers given by uuppttiimmee(1) and other programs.

       _/_p_r_o_c_/_l_o_c_k_s
              This file shows current file locks (fflloocckk(2) and  ffccnnttll(2))  and
              leases (ffccnnttll(2)).

       _/_p_r_o_c_/_m_a_l_l_o_c
              This  file is only present if CONFIGDEBUGMALLOC was defined dur‐
              ing compilation.

       _/_p_r_o_c_/_m_e_m_i_n_f_o
              This is used by ffrreeee(1) to report the amount of  free  and  used
              memory  (both  physical  and  swap) on the system as well as the
              shared memory and buffers used by the kernel.

              It is in the same format as ffrreeee(1), except in bytes rather than
              KB.

       _/_p_r_o_c_/_m_o_u_n_t_s
              This  is a list of all the file systems currently mounted on the
              system.  The format of this file is documented in _f_s_t_a_b(5).

       _/_p_r_o_c_/_m_o_d_u_l_e_s
              A text list of the modules that have been loaded by the  system.
              See also llssmmoodd(8).

       _/_p_r_o_c_/_m_t_r_r
              Memory  Type  Range  Registers.   See  _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_D_o_c_u_m_e_n_t_a_‐
              _t_i_o_n_/_m_t_r_r_._t_x_t for details.

       _/_p_r_o_c_/_n_e_t
              various net pseudo-files, all of which give the status  of  some
              part  of the networking layer.  These files contain ASCII struc‐
              tures and are, therefore, readable with cat.  However, the stan‐
              dard  nneettssttaatt(8)  suite  provides  much  cleaner access to these
              files.

       _/_p_r_o_c_/_n_e_t_/_a_r_p
              This holds an ASCII readable dump of the kernel ARP  table  used
              for  address  resolutions. It will show both dynamically learned
              and pre-programmed ARP entries.  The format is:

        IP address     HW type   Flags     HW address          Mask   Device
        192.168.0.50   0x1       0x2       00:50:BF:25:68:F3   *      eth0
        192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0

              Here 'IP address' is the IPv4 address of the machine and the 'HW
              type'  is  the  hardware  type  of the address from RFC 826. The
              flags are the internal flags of the ARP structure (as defined in
              /usr/include/linux/if_arp.h)  and  the  'HW address' is the data
              link layer mapping for that IP address if it is known.

       _/_p_r_o_c_/_n_e_t_/_d_e_v
              The dev pseudo-file contains network device status  information.
              This  gives  the number of received and sent packets, the number
              of errors and collisions and other basic statistics.  These  are
              used  by  the  iiffccoonnffiigg(8) program to report device status.  The
              format is:

 Inter-|   Receive                                                |  Transmit
  face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
     lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
   eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
   ppp0: 1622270    5552    1    0    0     0          0         0   354130    5669    0    0    0     0       0          0
   tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0

       _/_p_r_o_c_/_n_e_t_/_d_e_v___m_c_a_s_t
              Defined in _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_n_e_t_/_c_o_r_e_/_d_e_v___m_c_a_s_t_._c:
                   indx ifterface_name  dmi_u dmi_g dmi_address
                   2    eth0            1     0     01005e000001
                   3    eth1            1     0     01005e000001
                   4    eth2            1     0     01005e000001

       _/_p_r_o_c_/_n_e_t_/_i_g_m_p
              Internet    Group    Management    Protocol.      Defined     in
              _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_n_e_t_/_c_o_r_e_/_i_g_m_p_._c.

       _/_p_r_o_c_/_n_e_t_/_r_a_r_p
              This  file uses the same format as the _a_r_p file and contains the
              current reverse mapping database used to provide rraarrpp(8) reverse
              address lookup services. If RARP is not configured into the ker‐
              nel, this file will not be present.

       _/_p_r_o_c_/_n_e_t_/_r_a_w
              Holds a dump of the RAW socket table. Much of the information is
              not  of  use  apart from debugging. The 'sl' value is the kernel
              hash slot for the socket,  the  'local  address'  is  the  local
              address  and protocol number pair."St" is the internal status of
              the socket. The "tx_queue" and "rx_queue" are the  outgoing  and
              incoming  data queue in terms of kernel memory usage.  The "tr",
              "tm->when", and "rexmits" fields are not used by RAW.   The  uid
              field holds the creator euid of the socket.

       _/_p_r_o_c_/_n_e_t_/_s_n_m_p
              This file holds the ASCII data needed for the IP, ICMP, TCP, and
              UDP management information bases for an snmp agent.

       _/_p_r_o_c_/_n_e_t_/_t_c_p
              Holds a dump of the TCP socket table. Much of the information is
              not  of  use  apart from debugging. The "sl" value is the kernel
              hash slot for the socket,  the  "local  address"  is  the  local
              address  and  port  number  pair.   The  "remote address" is the
              remote address and port number pair (if connected). 'St' is  the
              internal  status  of  the socket.  The 'tx_queue' and 'rx_queue'
              are the outgoing and incoming data queue in terms of kernel mem‐
              ory  usage.   The  "tr",  "tm->when",  and "rexmits" fields hold
              internal information of the kernel socket  state  and  are  only
              useful  for  debugging.  The uid field holds the creator euid of
              the socket.

       _/_p_r_o_c_/_n_e_t_/_u_d_p
              Holds a dump of the UDP socket table. Much of the information is
              not  of  use  apart from debugging. The "sl" value is the kernel
              hash slot for the socket,  the  "local  address"  is  the  local
              address  and  port  number  pair.   The  "remote address" is the
              remote address and port number pair (if connected). "St" is  the
              internal  status  of  the socket.  The "tx_queue" and "rx_queue"
              are the outgoing and incoming data queue in terms of kernel mem‐
              ory  usage.  The  "tr", "tm->when", and "rexmits" fields are not
              used by UDP. The uid field holds the creator euid of the socket.
              The format is:

 sl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm->when uid
  1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001 01:000071BA 00000000 0
  1: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 6F000100 0
  1: 00000000:0201 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0

       _/_p_r_o_c_/_n_e_t_/_u_n_i_x
              Lists  the  UNIX  domain  sockets  present within the system and
              their status.  The format is:
              Num RefCount Protocol Flags    Type St Path
               0: 00000002 00000000 00000000 0001 03
               1: 00000001 00000000 00010000 0001 01 /dev/printer

              Here 'Num' is the kernel table slot number,  'RefCount'  is  the
              number of users of the socket, 'Protocol' is currently always 0,
              'Flags' represent the internal kernel flags holding  the  status
              of  the socket. Currently, type is always '1' (Unix domain data‐
              gram sockets are not yet supported in the kernel). 'St'  is  the
              internal state of the socket and Path is the bound path (if any)
              of the socket.

       _/_p_r_o_c_/_p_a_r_t_i_t_i_o_n_s
              Contains major and minor numbers of each partition  as  well  as
              number of blocks and partition name.

       _/_p_r_o_c_/_p_c_i
              This  is  a  listing of all PCI devices found during kernel ini‐
              tialization and their configuration.

       _/_p_r_o_c_/_s_c_s_i
              A directory with the scsi midlevel pseudo-file and various  SCSI
              lowlevel  driver directories, which contain a file for each SCSI
              host in this system, all of which give the status of  some  part
              of  the SCSI IO subsystem.  These files contain ASCII structures
              and are, therefore, readable with cat.

              You can also write to some of the files to reconfigure the  sub‐
              system or switch certain features on or off.

       _/_p_r_o_c_/_s_c_s_i_/_s_c_s_i
              This  is  a listing of all SCSI devices known to the kernel. The
              listing is similar to the one seen  during  bootup.   scsi  cur‐
              rently  supports only the _a_d_d_-_s_i_n_g_l_e_-_d_e_v_i_c_e command which allows
              root to add a hotplugged device to the list of known devices.

              An eecchhoo ''ssccssii aadddd--ssiinnggllee--ddeevviiccee 11 00 55 00'' >> //pprroocc//ssccssii//ssccssii  will
              cause  host scsi1 to scan on SCSI channel 0 for a device on ID 5
              LUN 0. If there is already a device known on this address or the
              address is invalid, an error will be returned.

       _/_p_r_o_c_/_s_c_s_i_/_[_d_r_i_v_e_r_n_a_m_e_]
              _[_d_r_i_v_e_r_n_a_m_e_]  can  currently  be  NCR53c7xx,  aha152x,  aha1542,
              aha1740, aic7xxx, buslogic, eata_dma, eata_pio, fdomain, in2000,
              pas16,  qlogic,  scsi_debug, seagate, t128, u15-24f, ultrastore,
              or wd7000.  These directories show up for all drivers that  reg‐
              istered at least one SCSI HBA. Every directory contains one file
              per registered host. Every host-file is named after  the  number
              the host was assigned during initialization.

              Reading these files will usually show driver and host configura‐
              tion, statistics etc.

              Writing to these files  allows  different  things  on  different
              hosts.   For  example,  with the _l_a_t_e_n_c_y and _n_o_l_a_t_e_n_c_y commands,
              root can switch on and off command latency measurement  code  in
              the  eata_dma  driver. With the _l_o_c_k_u_p and _u_n_l_o_c_k commands, root
              can control bus lockups simulated by the scsi_debug driver.

       _/_p_r_o_c_/_s_e_l_f
              This  directory  refers  to  the  process  accessing  the  /proc
              filesystem, and is identical to the /proc directory named by the
              process ID of the same process.

       _/_p_r_o_c_/_s_l_a_b_i_n_f_o
              Information about kernel caches.  The columns are:
              cache-name
              num-active-objs
              total-objs
              object-size
              num-active-slabs
              total-slabs
              num-pages-per-slab
              See ssllaabbiinnffoo(5) for details.

       _/_p_r_o_c_/_s_t_a_t
              kernel/system statistics.   Varies  with  architecture.   Common
              entries include:

              _c_p_u  _3_3_5_7 _0 _4_3_1_3 _1_3_6_2_3_9_3
                     The  number  of  jiffies  (1/100ths of a second) that the
                     system spent in user mode, user mode  with  low  priority
                     (nice),  system  mode,  and  the idle task, respectively.
                     The last value should be 100 times the  second  entry  in
                     the uptime pseudo-file.

              _p_a_g_e _5_7_4_1 _1_8_0_8
                     The  number  of  pages the system paged in and the number
                     that were paged out (from disk).

              _s_w_a_p _1 _0
                     The number of swap pages that have been  brought  in  and
                     out.

              _i_n_t_r _1_4_6_2_8_9_8
                     The number of interrupts received from the system boot.

              _d_i_s_k___i_o_: _(_2_,_0_)_:_(_3_1_,_3_0_,_5_7_6_4_,_1_,_2_) _(_3_,_0_)_:...
                     (major,minor):(noinfo,       read_io_ops,      blks_read,
                     write_io_ops, blks_written)

              _c_t_x_t _1_1_5_3_1_5
                     The number of context switches that the system underwent.

              _b_t_i_m_e _7_6_9_0_4_1_6_0_1
                     boot  time, in seconds since the epoch (January 1, 1970).

              _p_r_o_c_e_s_s_e_s _8_6_0_3_1
                     Number of forks since boot.

       _/_p_r_o_c_/_s_w_a_p_s
              Swap areas in use.  See also sswwaappoonn(8).

       _/_p_r_o_c_/_s_y_s
              This directory (present since 1.3.57) contains a number of files
              and  subdirectories  corresponding  to  kernel variables.  These
              variables can be read and sometimes modified using the _p_r_o_c file
              system, and the ssyyssccttll(2) system call. Presently, there are sub‐
              directories _a_b_i, _d_e_b_u_g, _d_e_v, _f_s, _k_e_r_n_e_l, _n_e_t, _p_r_o_c, _r_x_r_p_c,  _s_u_n_‐
              _r_p_c and _v_m that each contain more files and subdirectories.

       _/_p_r_o_c_/_s_y_s_/_a_b_i
              This  directory may contain files with application binary infor‐
              mation.  On some systems, it is not present.

       _/_p_r_o_c_/_s_y_s_/_d_e_b_u_g
              This directory may be empty.

       _/_p_r_o_c_/_s_y_s_/_d_e_v
              This  directory  contains  device   specific   information   (eg
              dev/cdrom/info).  On some systems, it may be empty.

       _/_p_r_o_c_/_s_y_s_/_f_s
              This  contains  the  subdirectory  _b_i_n_f_m_t___m_i_s_c and files _d_e_n_t_r_y_-
              _s_t_a_t_e, _d_i_r_-_n_o_t_i_f_y_-_e_n_a_b_l_e, _d_q_u_o_t_-_n_r,  _f_i_l_e_-_m_a_x,  _f_i_l_e_-_n_r,  _i_n_o_d_e_-
              _m_a_x,  _i_n_o_d_e_-_n_r,  _i_n_o_d_e_-_s_t_a_t_e,  _l_e_a_s_e_-_b_r_e_a_k_-_t_i_m_e,  _l_e_a_s_e_s_-_e_n_a_b_l_e,
              _o_v_e_r_f_l_o_w_g_i_d, _o_v_e_r_f_l_o_w_u_i_d _s_u_p_e_r_-_m_a_x and  _s_u_p_e_r_-_n_r  with  function
              fairly clear from the name.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_b_i_n_f_m_t___m_i_s_c
              Documentation  for  files  in  this  directory can in the kernel
              sources in _D_o_c_u_m_e_n_t_a_t_i_o_n_/_b_i_n_f_m_t___m_i_s_c_._t_x_t.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_e_n_t_r_y_-_s_t_a_t_e
              This file contains six numbers, _n_r___d_e_n_t_r_y, _n_r___u_n_u_s_e_d,  _a_g_e___l_i_m_i_t
              (age in seconds), want_pages (pages requested by system) and two
              dummy values.  nr_dentry seems to be 0 all the time.   nr_unused
              seems to be the number of unused dentries.  age_limit is the age
              in seconds after which dcache entries can be reclaimed when mem‐
              ory  is  short  and  want_pages  is  nonzero when the kernel has
              called shrink_dcache_pages() and the dcache isn't pruned yet.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_i_r_-_n_o_t_i_f_y_-_e_n_a_b_l_e
              This file can be used to disable or enable the _d_n_o_t_i_f_y interface
              described  in  ffccnnttll(2) on a system-wide basis.  A value of 0 in
              this file disables the interface, and a value of 1 enables it.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_q_u_o_t_-_m_a_x
              This file shows the maximum number of cached disk quota entries.
              On some (2.4) systems, it is not present.  If the number of free
              cached disk quotas is very low and you have some awesome  number
              of simultaneous system users, you might want to raise the limit.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_q_u_o_t_-_n_r
              This file shows the number of allocated disk quota  entries  and
              the number of free disk quota entries.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_m_a_x
              This  file  defines  a  system-wide  limit on the number of open
              files for all processes.  (See also sseettrrlliimmiitt(2), which  can  be
              used  by  a process to set the per-process limit, RRLLIIMMIITT__NNOOFFIILLEE,
              on the number of files it may open.)  If you get lots  of  error
              messages  about running out of file handles, try increasing this
              value:

              echo 100000 > /proc/sys/fs/file-max

              The kernel constant _N_R___O_P_E_N imposes an upper limit on the  value
              that may be placed in _f_i_l_e_-_m_a_x.

              If  you  increase  _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_m_a_x,  be  sure  to increase
              _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_m_a_x  to  3-4   times   the   new   value   of
              _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_m_a_x, or you will run out of inodes.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_n_r
              This  (read-only)  file  gives  the  number  of  files presently
              opened.  It contains three numbers: The number of allocated file
              handles,  the number of free file handles and the maximum number
              of file handles.  The kernel allocates file handles dynamically,
              but  it  doesn't  free  them  again.  If the number of allocated
              files is close to the

              maximum, you should consider increasing the maximum.   When  the
              number  of free file handles is large, you've encountered a peak
              in your usage of file handles and you  probably  don't  need  to
              increase the maximum.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_m_a_x
              This  file  contains the maximum number of in-memory inodes.  On
              some (2.4) systems, it may not be present. This value should  be
              3-4 times larger than the value in file-max, since stdin, stdout
              and network sockets also need an inode to handle them. When  you
              regularly run out of inodes, you need to increase this value.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_n_r
              This file contains the first two values from inode-state.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_s_t_a_t_e
              This  file  contains  seven  numbers: nr_inodes, nr_free_inodes,
              preshrink and four dummy values.  nr_inodes  is  the  number  of
              inodes the system has allocated.  This can be slightly more than
              inode-max because Linux allocates them one pageful  at  a  time.
              nr_free_inodes  represents the number of free inodes.  preshrink
              is nonzero when the nr_inodes > inode-max and the  system  needs
              to prune the inode list instead of allocating more.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_l_e_a_s_e_-_b_r_e_a_k_-_t_i_m_e
              This file specifies the grace period that the kernel grants to a
              process holding a file lease (ffccnnttll(2)) after it has sent a sig‐
              nal to that process notifying it that another process is waiting
              to open the file.  If the lease holder does not remove or  down‐
              grade  the  lease  within this grace period, the kernel forcibly
              breaks the lease.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_l_e_a_s_e_s_-_e_n_a_b_l_e
              This  file  can  be  used  to  enable  or  disable  file  leases
              (ffccnnttll(2))  on  a  system-wide basis.  If this file contains the
              value 0, leases are disabled.  A non-zero value enables  leases.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_g_i_d and _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_u_i_d
              These  files  allow you to change the value of the fixed UID and
              GID.  The default  is  65534.   Some  filesystems  only  support
              16-bit  UIDs  and  GIDs,  although in Linux UIDs and GIDs are 32
              bits. When one of  these  filesystems  is  mounted  with  writes
              enabled, any UID or GID that would exceed 65535 is translated to
              the overflow value before being written to disk.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_s_u_p_e_r_-_m_a_x
              This file controls the maximum number of superblocks,  and  thus
              the  maximum  number of mounted filesystems the kernel can have.
              You only need to increase super-max if you need  to  mount  more
              filesystems than the current value in super-max allows you to.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_s_u_p_e_r_-_n_r
              This  file contains the number of filesystems currently mounted.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l
              This  directory  contains  files   _a_c_c_t,   _c_a_d___p_i_d,   _c_a_p_-_b_o_u_n_d,
              _c_o_r_e___p_a_t_t_e_r_n, _c_o_r_e___u_s_e_s___p_i_d, _c_t_r_l_-_a_l_t_-_d_e_l, _d_e_n_t_r_y_-_s_t_a_t_e, _d_o_m_a_i_n_‐
              _n_a_m_e, _h_o_t_p_l_u_g,  _h_o_s_t_n_a_m_e,  _h_t_a_b_-_r_e_c_l_a_i_m  (PowerPC  only),  _j_a_v_a_-
              _a_p_p_l_e_t_v_i_e_w_e_r     (binfmt_java,    obsolete),    _j_a_v_a_-_i_n_t_e_r_p_r_e_t_e_r
              (binfmt_java, obsolete), _l_2_c_r (PowerPC only), _m_o_d_p_r_o_b_e,  _m_s_g_m_a_x,
              _m_s_g_m_n_b,  _m_s_g_m_n_i,  _o_s_r_e_l_e_a_s_e,  _o_s_t_y_p_e,  _o_v_e_r_f_l_o_w_g_i_d, _o_v_e_r_f_l_o_w_u_i_d,
              _p_a_n_i_c, _p_a_n_i_c___o_n___o_o_p_s,  _p_i_d___m_a_x,  _p_o_w_e_r_s_a_v_e_-_n_a_p  (PowerPC  only),
              _p_r_i_n_t_k,  _p_t_y,  _r_a_n_d_o_m,  _r_e_a_l_-_r_o_o_t_-_d_e_v,  _r_e_b_o_o_t_-_c_m_d (SPARC only),
              _r_t_s_i_g_-_m_a_x, _r_t_s_i_g_-_n_r, _s_e_m, _s_g_-_b_i_g_-_b_u_f_f, _s_h_m_a_l_l,  _s_h_m_m_a_x,  _s_h_m_m_n_i,
              _s_y_s_r_q,  _t_a_i_n_t_e_d,  _t_h_r_e_a_d_s_-_m_a_x,  _v_e_r_s_i_o_n  and _z_e_r_o_-_p_a_g_e_d (PowerPC
              only) with function fairly clear from the name.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_a_c_c_t
              This file contains three numbers: highwater, lowwater  and  fre‐
              quency.  If BSD-style process accounting is enabled these values
              control its behaviour. If free space on filesystem where the log
              lives  goes  below lowwater percent accounting suspends. If free
              space gets above highwater  percent  accounting  resumes.   Fre‐
              quency determines how often the kernel checks the amount of free
              space (value is in seconds). Default values are  4,  2  and  30.
              That is, suspend accounting if <= 2% of space is free; resume it
              if >= 4% of space is free; consider information about amount  of
              free space valid for 30 seconds.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_a_p_-_b_o_u_n_d
              This  file holds the value of the kernel _c_a_p_a_b_i_l_i_t_y _b_o_u_n_d_i_n_g _s_e_t
              (expressed as a signed  decimal  number).   This  set  is  ANDed
              against the capabilities permitted to a process during exec.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___p_a_t_t_e_r_n
              This  file  (new  in  Linux 2.5) provides finer control over the
              form  of  a  core  filename  than  the  obsolete  _/_p_r_o_c_/_s_y_s_/_k_e_r_‐
              _n_e_l_/_c_o_r_e___u_s_e_s___p_i_d  file  described  below.   The name for a core
              file is controlled by  defining  a  template  in  _/_p_r_o_c_/_s_y_s_/_k_e_r_‐
              _n_e_l_/_c_o_r_e___p_a_t_t_e_r_n.   The  template can contain % specifiers which
              are substituted by the following values when a core file is cre‐
              ated:

                %%  A single % character
                %p  PID of dumped process
                %u  real UID of dumped process
                %g  real GID of dumped process
                %s  number of signal causing dump
                %t  time of dump (secs since 0:00h, 1 Jan 1970)
                %h  hostname (same as the 'nodename'
                    returned by uunnaammee(2))
                %e  executable filename

              A  single  % at the end of the template is dropped from the core
              filename, as is the combination of a % followed by any character
              other than those listed above.  All other characters in the tem‐
              plate become a literal part of the core filename.   The  maximum
              size  of  the  resulting core filename is 64 bytes.  The default
              value in this file is "core".  For  backward  compatibility,  if
              _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___p_a_t_t_e_r_n   does   not   include   "%p"  and
              _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___u_s_e_s___p_i_d is non-zero, then  .PID  will  be
              appended to the core filename.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___u_s_e_s___p_i_d
              This  file can be used control the naming of a core dump file on
              Linux 2.4.  If this file contains the value 0, then a core  dump
              file  is  simply  named  _c_o_r_e.  If this file contains a non-zero
              value, then the core dump file includes the process ID in a name
              of the form _c_o_r_e_._P_I_D.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_t_r_l_-_a_l_t_-_d_e_l
              This  file  controls  the handling of Ctrl-Alt-Del from the key‐
              board.  When the value  in  this  file  is  0,  Ctrl-Alt-Del  is
              trapped  and  sent  to  the iinniitt(1) program to handle a graceful
              restart.  When the value is > 0, Linux's reaction  to  a  Vulcan
              Nerve Pinch (tm) will be an immediate reboot, without even sync‐
              ing its dirty buffers.  Note: when a program (like  dosemu)  has
              the  keyboard  in 'raw' mode, the ctrl-alt-del is intercepted by
              the program before it ever reaches the  kernel  tty  layer,  and
              it's up to the program to decide what to do with it.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_h_o_t_p_l_u_g
              This  file  contains the path for the hotplug policy agent.  The
              default value in this file "/sbin/hotplug".

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_d_o_m_a_i_n_n_a_m_e and _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_h_o_s_t_n_a_m_e
              can be used to set the NIS/YP domainname  and  the  hostname  of
              your  box in exactly the same way as the commands domainname and
              hostname, i.e.:

              # echo "darkstar" > /proc/sys/kernel/hostname
              # echo "mydomain" > /proc/sys/kernel/domainname

              has the same effect as

              # hostname "darkstar"
              # domainname "mydomain"

              Note, however, that the classic darkstar.frop.org has the  host‐
              name "darkstar" and DNS (Internet Domain Name Server) domainname
              "frop.org", not to be confused with the NIS (Network Information
              Service) or YP (Yellow Pages) domainname. These two domain names
              are in general different. For  a  detailed  discussion  see  the
              hhoossttnnaammee(1) man page.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_h_t_a_b_-_r_e_c_l_a_i_m
              (PowerPC only) If this file is set to a non-zero value, the Pow‐
              erPC htab (see kernel  file  Documentation/powerpc/ppc_htab.txt)
              is pruned each time the system hits the idle loop.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_l_2_c_r
              (PowerPC  only)  This  file contains a flag that controls the L2
              cache of G3 processor boards.  If  0,  the  cache  is  disabled.
              Enabled if nonzero.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_o_d_p_r_o_b_e
              This  file  is  described  by  the kernel source file Documenta‐
              tion/kmod.txt.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_a_x
              This file defines a system-wide  limit  specifying  the  maximum
              number  of  bytes in a single message written on a System V mes‐
              sage queue.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_n_i
              This file defines the system-wide limit on the number of message
              queue  identifiers.   (This  file  is  only present in Linux 2.4
              onwards.)

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_n_b
              This file defines a system-wide paramter used to initialise  the
              _m_s_g___q_b_y_t_e_s  setting for subsequenly created message queues.  The
              _m_s_g___q_b_y_t_e_s setting specifies the maximum number  of  bytes  that
              may be written to the message queue.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_s_t_y_p_e and _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_s_r_e_l_e_a_s_e
              These files give substrings of _/_p_r_o_c_/_v_e_r_s_i_o_n.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_v_e_r_f_l_o_w_g_i_d and _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_v_e_r_f_l_o_w_u_i_d
              These  files  duplicate  the  files _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_g_i_d and
              _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_u_i_d.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_a_n_i_c
              gives read/write access to the  kernel  variable  _p_a_n_i_c___t_i_m_e_o_u_t.
              If  this is zero, the kernel will loop on a panic; if nonzero it
              indicates that the kernel should autoreboot after this number of
              seconds.   When you use the software watchdog device driver, the
              recommended setting is 60.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_a_n_i_c___o_n___o_o_p_s
              This file (new in Linux 2.5)  controls  the  kernel's  behaviour
              when  an  oops  or BUG is encountered.  If this file contains 0,
              then the system tries to continue operation.  If it contains  1,
              then  the  system  delays  a  few seconds (to give klogd time to
              record the oops output) and then panics.  If the  _/_p_r_o_c_/_s_y_s_/_k_e_r_‐
              _n_e_l_/_p_a_n_i_c  file  is  also  non-zero  then  the  machine  will be
              rebooted.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_i_d___m_a_x
              This file (new in Linux 2.5) specifies the value at  which  PIDs
              wrap  around  (i.e.,  the value in this file is one greater than
              the maximum PID).  The  default  value  for  this  file,  32768,
              results  in  the  same range of PIDs as on earlier kernels.  The
              value in  this  file  can  be  set  to  any  value  up  to  2^22
              (PID_MAX_LIMIT, approximately 4 million).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_o_w_e_r_s_a_v_e_-_n_a_p (PowerPC only)
              This file contains a flag.  If set, Linux-PPC will use the 'nap'
              mode of powersaving, otherwise the 'doze' mode will be used.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_r_i_n_t_k
              The four values in this file are console_loglevel,  default_mes‐
              sage_loglevel,     minimum_console_level     and    default_con‐
              sole_loglevel.  These values influence  printk()  behavior  when
              printing  or logging error messages. See ssyysslloogg(2) for more info
              on the different loglevels.  Messages  with  a  higher  priority
              than  console_loglevel will be printed to the console.  Messages
              without an explicit  priority  will  be  printed  with  priority
              default_message_level.   minimum_console_loglevel is the minimum
              (highest)  value  to  which   console_loglevel   can   be   set.
              default_console_loglevel   is   the   default   value  for  con‐
              sole_loglevel.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_t_y (since Linux 2.6.4)
              This directory contains two files relating to the number of Unix
              98 pseudo-terminals (see ppttss(4)) on the system.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_t_y_/_m_a_x
              This file defines the maximum number of pseudo-terminals.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_t_y_/_n_r
              This read-only file indicates how many pseudo-terminals are cur‐
              rently in use.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_a_n_d_o_m
              This directory contains various parameters controlling the oper‐
              ation of the file _/_d_e_v_/_r_a_n_d_o_m.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_e_a_l_-_r_o_o_t_-_d_e_v
              This  file  is  documented  in the kernel source file Documenta‐
              tion/initrd.txt.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_e_b_o_o_t_-_c_m_d (Sparc only)
              This file seems to be a way to give an  argument  to  the  SPARC
              ROM/Flash boot loader. Maybe to tell it what to do after reboot‐
              ing?

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_t_s_i_g_-_m_a_x
              This file can be used to tune the maximum number of POSIX  real‐
              time (queued) signals that can be outstanding in the system.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_t_s_i_g_-_n_r
              This  file  shows  the  number  POSIX realtime signals currently
              queued.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_e_m (since Linux 2.4)
              This file contains 4 numbers defining limits for  System  V  IPC
              semaphores.  These fields are, in order:

              SEMMSL  The maximum semaphores per semaphore set.

              SEMMNS  A  system-wide  limit on the number of semaphores in all
                      semaphore sets.

              SEMOPM  The maximum number of operations that may  be  specified
                      in a sseemmoopp(2) call.

              SEMMNI  A  system-wide  limit on the maximum number of semaphore
                      identifiers.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_g_-_b_i_g_-_b_u_f_f
              This file shows the size of the generic SCSI device (sg) buffer.
              You  can't  tune it just yet, but you could change it on compile
              time by editing include/scsi/sg.h  and  changing  the  value  of
              SG_BIG_BUFF.   However,  there shouldn't be any reason to change
              this value.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m_a_l_l
              This file contains the system-wide limit on the total number  of
              pages of System V shared memory.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m_m_a_x
              This file can be used to query and set the run time limit on the
              maximum (System V IPC) shared memory segment size  that  can  be
              created.   Shared memory segments up to 1Gb are now supported in
              the kernel.  This value defaults to SHMMAX.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m_m_n_i
              (available in Linux 2.4 and onwards)  This  file  specifies  the
              system-wide  maximum  number  of System V shared memory segments
              that can be created.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_v_e_r_s_i_o_n
              contains a string like:

              #5 Wed Feb 25 21:49:24 MET 1998.TP

              The '#5' means that this is the fifth  kernel  built  from  this
              source base and the date behind it indicates the time the kernel
              was built.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_z_e_r_o_-_p_a_g_e_d (PowerPC only)
              This file contains a flag. When  enabled  (non-zero),  Linux-PPC
              will  pre-zero  pages  in  the  idle  loop, possibly speeding up
              get_free_pages.

       _/_p_r_o_c_/_s_y_s_/_n_e_t
              This directory contains networking stuff.

       _/_p_r_o_c_/_s_y_s_/_p_r_o_c
              This directory may be empty.

       _/_p_r_o_c_/_s_y_s_/_s_u_n_r_p_c
              This directory supports Sun remote procedure  call  for  network
              file system (NFS).  On some systems, it is not present.

       _/_p_r_o_c_/_s_y_s_/_v_m
              This  directory  contains  files  for  memory management tuning,
              buffer and cache management.

       _/_p_r_o_c_/_s_y_s_v_i_p_c
              Subdirectory containing  the  pseudo-files  _m_s_g,  _s_e_m  and  _s_h_m.
              These  files  list the System V Interprocess Communication (IPC)
              objects (respectively: message queues,  semaphores,  and  shared
              memory)  that  currently  exist on the system, providing similar
              information to that available via  iippccss(1).   These  files  have
              headers  and  are  formatted  (one IPC object per line) for easy
              understanding.  iippcc(5) provides further background on the infor‐
              mation shown by these files.

       _/_p_r_o_c_/_t_t_y
              Subdirectory  containing the psuedo-files and subdirectories for
              tty drivers and line disciplines.

       _/_p_r_o_c_/_u_p_t_i_m_e
              This file contains two numbers: the uptime of the  system  (sec‐
              onds), and the amount of time spent in idle process (seconds).

       _/_p_r_o_c_/_v_e_r_s_i_o_n
              This string identifies the kernel version that is currently run‐
              ning.    It   includes   the   contents   of   /proc/sys/ostype,
              /proc/sys/osrelease and /proc/sys/version.  For example:
            Linux version 1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994


SSEEEE AALLSSOO
       ccaatt(1), ffiinndd(1), ffrreeee(1), mmoouunntt(1), ppss(1), ttrr(1), uuppttiimmee(1), cchhrroooott(2),
       mmmmaapp(2),  rreeaaddlliinnkk(2),   ssyysslloogg(2),   ssllaabbiinnffoo(5),   hhiieerr(7),   aarrpp(8),
       ddmmeessgg(8),   hhddppaarrmm(8),  iiffccoonnffiigg(8),  llssmmoodd(8),  llssppccii(8),  nneettssttaatt(8),
       pprroocciinnffoo(8),      rroouuttee(8),       _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_D_o_c_u_m_e_n_t_a_t_i_o_n_/_f_i_l_e_s_y_s_‐
       _t_e_m_s_/_p_r_o_c_._t_x_t

CCAAVVEEAATTSS
       Note  that many strings (i.e., the environment and command line) are in
       the internal format, with sub-fields terminated by NUL  bytes,  so  you
       may  find  that  things are more readable if you use _o_d _-_c or _t_r _"_\_0_0_0_"
       _"_\_n_" to read them.  Alternatively, _e_c_h_o _‘_c_a_t _<_f_i_l_e_>_‘ works well.

       This manual page is incomplete, possibly inaccurate, and is the kind of
       thing that needs to be updated very often.

AACCKKNNOOWWLLEEDDGGEEMMEENNTTSS
       The  material  on /proc/sys/fs and /proc/sys/kernel is closely based on
       kernel source documentation files written by Rik van Riel.




                                  2003-05-27                           PROC(5)
